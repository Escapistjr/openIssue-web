$attribute-type: ('spacing', 'padding', 'distribution', 'alignment', 'wrap');

@function breakpoint($value, $adjustment: 0) {
	$adjusted-value: em($adjustment);

	// Reduces chances to have a style void
	// between two media queries
	// See https://github.com/sass-mq/sass-mq/issues/6
	@if ($adjustment == -1px) {
		$adjusted-value: -0.01em;
	} @else if ($adjustment == 1px) {
		$adjusted-value: 0.01em;
	}

	@return em($value) + $adjusted-value;
}

@mixin breakpoint-after($breakpoint, $inclusive: true) {
	@media (min-width: #{breakpoint($breakpoint, if($inclusive, 0, 1px))}) {
		@content;
	}
}

@function capitalize($string) {
	@return to-upper-case(str-slice($string, 1, 1)) + str-slice($string, 2);
}

/// Generate classes dynamicaly for responsivnes [mobile, web].
/// example: <Stack spacing={['loose', 'tight']}>...</Stack>
/// => loose is for mobile screens, tight is for screens larger then 768px
@mixin generateResponsiveClasses($map, $prefix: $string, $attribute: $attribute-type) {
	@each $smallScreenName, $smallScreenValue in $map {
		@each $largeScreenName, $largeScreenValue in $map {
			@if $smallScreenName != $largeScreenName {
				.#{$prefix}#{capitalize(#{$smallScreenName})}-#{capitalize(#{$largeScreenName})} {
					@if $attribute == spacing {
						@include stack-spacing($smallScreenValue);

						@include breakpoint-after(768px) {
							@include stack-spacing($largeScreenValue);
						}
					} @else if $attribute == alignment {
						align-items: #{$smallScreenValue};

						@include breakpoint-after(768px) {
							align-items: #{$largeScreenValue};
						}
					} @else if $attribute == 'padding' {
						padding: spacing(#{$smallScreenValue});

						@include breakpoint-after(768px) {
							padding: spacing(#{$largeScreenValue});
						}
					} @else if $attribute == 'wrap' {
						flex-wrap: #{$smallScreenValue};

						@include breakpoint-after(768px) {
							flex-wrap: #{$largeScreenValue};
						}
					} @else if $attribute == distribution {
						@if $smallScreenName == 'fill' {
							> .Stack--Item {
								flex: #{$smallScreenValue};
							}

							@include breakpoint-after(768px) {
								justify-content: #{$largeScreenValue};
							}
						} @else if $smallScreenName == 'fillEqually' {
							> .Stack--Item {
								flex: #{$smallScreenValue};

								@supports (min-width: fit-content) {
									flex: 1 0 0%;
									min-width: fit-content;
								}
							}

							@include breakpoint-after(768px) {
								justify-content: #{$largeScreenValue};
							}
						} @else if $largeScreenName == 'fill' {
							justify-content: #{$smallScreenValue};

							@include breakpoint-after(768px) {
								> .Stack--Item {
									flex: #{$largeScreenValue};
								}
							}
						} @else if $largeScreenName == 'fillEqually' {
							justify-content: #{$smallScreenValue};

							@include breakpoint-after(768px) {
								> .Stack--Item {
									flex: #{$largeScreenValue};

									@supports (min-width: fit-content) {
										flex: 1 0 0%;
										min-width: fit-content;
									}
								}
							}
						} @else {
							justify-content: #{$smallScreenValue};

							@include breakpoint-after(768px) {
								justify-content: #{$largeScreenValue};
							}
						}
					}
				}
			}
		}
	}
}
