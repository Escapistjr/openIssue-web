// -----------------------------------------------------------------------------
// This file contains helper classes, functions, and mixins
// -----------------------------------------------------------------------------
@mixin hover {
	&:hover,
	&:active,
	&:focus {
		@content;
	}
}

/// Returns the border radius of the specified size.
/// @param {String} $size - The border radiusâ€™s size.
/// @return {Number} The border radius value.

$border-radius-data: (
	base: 4px,
	large: 6px,
);

@function border-radius($size: base) {
	@return map-get($border-radius-data, $size);
}

/// Returns the value in rem for a given pixel value.
/// @param {Number} $value - The pixel value to be converted.
/// @return {Number} The converted value in rem.

$base-font-size: 10px;
$default-browser-font-size: 16px;

@function rem($value) {
	$unit: unit($value);

	@if $value == 0 {
		@return 0;
	} @else if $unit == 'rem' {
		@return $value;
	} @else if $unit == 'px' {
		@return $value / $base-font-size * 1rem;
	} @else if $unit == 'em' {
		@return $unit / 1em * 1rem;
	} @else {
		@error 'Value must be in px, em, or rem.';
	}
}

/// Returns the value in ems for a given pixel value. Note that this
/// only works for elements that have had no font-size changes.
/// @param {Number} $value - The pixel value to be converted.
/// @return {Number} The converted value in ems.

@function em($value) {
	$unit: unit($value);

	@if $value == 0 {
		@return 0;
	} @else if $unit == 'em' {
		@return $value;
	} @else if $unit == 'rem' {
		@return $value / 1rem * 1em * ($base-font-size / $default-browser-font-size);
	} @else if $unit == 'px' {
		@return $value / $default-browser-font-size * 1em;
	} @else {
		@error 'Value must be in px, rem, or em.';
	}
}

/// Returns the list of available names in a given map.
/// @param {Map} $map - The map of data to list the names from.
/// @param {Number} $map - The level of depth to get names from.
/// @return {String} The list of names in the map.

@function available-names($map, $level: 1) {
	@if type-of($map) != 'map' {
		@return null;
	}

	$output: '';
	$newline: '\A ';

	@if $level == 1 {
		@each $key, $value in $map {
			$output: $output + '#{$newline}- #{$key} #{available-names($value, $level + 1)}';
		}
	} @else {
		$output: '(';
		$i: 1;

		@each $key, $value in $map {
			$sep: if($i < length($map), ', ', '');
			$output: $output + '#{$key}#{$sep}#{available-names($value, $level + 1)}';
			$i: $i + 1;
		}

		$output: $output + ')';
	}

	@return $output;
}

/// Returns the spacing value for a given variant.
///
/// @param {String} $variant - The key for the given variant.
/// @return {Number} The spacing for the variant.

$spacing-map: (
	'none': 0,
	'extraTight': 6px,
	'tight': 8px,
	'base-tight': 12px,
	'base': 16px,
	'loose': 20px,
	'extraLoose': 32px,
);

@function spacing($variant: base) {
	$fetched-value: map-get($spacing-map, $variant);

	@if type-of($fetched-value) == number {
		@return rem($fetched-value);
	} @else {
		@error 'Spacing variant `#{$variant}` not found. Available variants: #{available-names($spacing-map)}';
	}
}

/** Ensure margins of any children are contained within */
@mixin margin-collapse-fix {
	padding: 1px 0 0 0;
	margin: -1px 0 0 0;
	&::after {
		content: '';
		display: table;
	}
}
